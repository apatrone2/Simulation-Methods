"0","#This function inverses an matrix"
"0","inv=function(X){"
"0","  EV=eigen(X) "
"0","  EV$vector%*%diag(1/EV$values)%*%t(EV$vector)"
"0","}"
"0",""
"0",""
"0","#log-marginal density of model gamma"
"0","lpostw=function(gam,y,X,beta){"
"0","  n=length(y)"
"0","  qgam=sum(gam)"
"0","  Xt1=cbind(rep(1,n),X[,which(gam==1)])"
"0","  if (qgam!=0) P1=Xt1%*%inv(t(Xt1)%*%Xt1)%*%t(Xt1) else{"
"0","  P1=matrix(0,n,n)}"
"0","  -(qgam+1)/2*log(n+1)-n/2*log(t(y)%*%y-n/(n+1)*"
"0","  t(y)%*%P1%*%y-1/(n+1)*t(beta)%*%t(cbind(rep(1,n),"
"0","  X))%*%P1%*%cbind(rep(1,n),X)%*%beta)"
"0","}"
"0",""
"0","#The Metropolis-Hasting algorithm itself."
"0","gocho=function(niter,y,X){"
"0","  lga=dim(X)[2]"
"0","  beta=lm(y~X)$coeff"
"0","  gamma=matrix(0,nrow=niter,ncol=lga)"
"0","  gamma[1,]=sample(c(0,1),lga,rep=T)"
"0","    for (t in 1:(niter-1)){"
"0","      j=sample(1:lga,1)"
"0","      gam0=gam1=gamma[t,];gam1[j]=1-gam0[j]"
"0","      pr=lpostw(gam0,y,X,beta)"
"0","      pr=c(pr,lpostw(gam1,y,X,beta))"
"0","      pr=exp(pr-max(pr))"
"0","      gamma[t+1,]=gam0"
"0","    if (sample(c(0,1),1,prob=pr)){"
"0","        gamma[t+1,]=gam1"
"0","        }"
"0","      }"
"0","  gamma"
"0","}"
"0",""
