"0","normm<-function (Nsim, a) # give the n. of simulations and the a rate. that is the acceptance rate."
"0","{       vec <- vector(""numeric"", Nsim) # create an vector where the simulation results are stored"
"0","        x <- 0 # Init value"
"0","        vec[1] <- x # put init value to the vector that stores the resultsa"
"0","        for (i in 2:Nsim) { # start the for loop that goes from 2 to the Nsim"
"0","                innov <- runif(1, -a, a) # sample from uniform[-a, a]"
"0","                Xstar <- x + innov # proposal plus random walk element innov"
"0","                aprob <- min(1, dnorm(Xstar)/dnorm(x)) # aprov rate"
"0","                u <- runif(1) # sample the minumum that must be cleared, so that the proposal is accepted. "
"0","                if (u < aprob)  # if proposal less than u, proposal is not accepted and the previuous x remains "
"0","                        x <- Xstar # if proposal is accepted the x* becomes the x"
"0","                vec[i] <- x # save the new or old x into the vector."
"0","        } "
"0","        vec #return the vector so it can be put on plot, to show the underlying distribution."
"0","}"
"0",""
