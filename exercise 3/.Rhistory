run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
pos
pos[k,]
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k] <- run
pos[k] <- run
pos[k]
pos <- matrix(ncol = ptot, nrow=1600)
pos
k = 1
pos[k]
pos[k,]
run
length(run)
pos[k,] <- run
## DATA AND INITIAL VALUES
pred <- housing_data[-1:-2] #
y <- housing_data[1]
n <- nrow(housing_data)
ptot <- length(pred[1,]) # NUMBER OF PREDICTORS
m <- c(rep(60,5),rep(120,5),rep(220,5)) # THREE STAGE LENGTHS
tau.start <- 1
tau <- rep(tau.start,15)
bics <- NULL
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
print(pos)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
run.vars <- as.matrix(run.vars)
print(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
print(run.vars)
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
## DATA AND INITIAL VALUES
pred <- housing_data[-1:-2] #
y <- housing_data[1]
n <- nrow(housing_data)
ptot <- length(pred[1,]) # NUMBER OF PREDICTORS
m <- c(rep(60,5),rep(120,5),rep(220,5)) # THREE STAGE LENGTHS
tau.start <- 1
tau <- rep(tau.start,15)
bics <- NULL
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
print(run.vars)
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
pos[,k] <- pos
}
}
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
print(run.vars)
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
#pos[,k] <- pos
}
}
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
pos <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
k = k + 1
run.step <- run.current
print(run.step)
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
#pos[,k] <- pos
}
}
positions <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
positions <- matrix(ncol = ptot, nrow=1600)
k = 1
pos[k,] <- run
positions <- matrix(ncol = ptot, nrow=1600)
k = 1
positions[k,] <- run
set.seed(12345)
run <- rbinom(ptot,1,.5) # SAMPLE INDICATOR FOR PREDICTORS
run.current <- run
run.vars <- pred[,run.current==1] #SELECT PREDICTORS BASED ON INDICATORS
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)# INITIAL LINEAR MODEL
#run.bic <- BIC(f)[2] # EXTRACT BIC
run.bic <- BIC(f) # EXTRACT BIC
best.bic <- run.bic
bics <- run.bic
positions <- matrix(ncol = ptot, nrow=1600)
k = 1
positions[k,] <- run
for(j in 2:13){tau[j] <- 0.9*tau[j-1]} #TEMP SCHEDULE 15 LEVELS
## SIMULATED ANNEALING
for(j in 1:13){# RANDOMLY SELECTS A PREDICTOR TO ADD/REMOVE FROM THE MODEL
# AND ACCEPTS THE NEW MODEL IF IT IS BETTER OR WITH PROBABILITY prob
for(i in 1:m[j]){
pos <- sample(1:ptot,1)
run.step <- run.current
k = k + 1
positions[k,] <- run.step
run.step[pos] <- !run.current[pos]
run.vars <- pred[,run.step==1]
run.vars <- as.matrix(run.vars)
y <- as.matrix(y)
f <- lm(y ~ run.vars)
run.step.bic <- BIC(f)
prob <- min(1,exp((run.bic - BIC(f))/tau[j]))
#print(run.step.bic)
if(run.step.bic < run.bic){
run.current <- run.step
run.bic <- run.step.bic
}
if(rbinom(1,1,prob)){
run.current <- run.step
run.bic <- run.step.bic
}
if(run.step.bic < best.bic){ #ACCEPT IF BETTER THAN CURRENT BEST
run <- run.step
best.bic <- run.step.bic
}
bics <- c(bics, run.bic)
#pos[,k] <- pos
}
}
positions
apply(mean, 1,positions)
apply(mean,positions,1)
apply(positions,mean)
apply(positions,1, mean)
positions
apply(positions,1, mean)
lapply(positions,1, mean)
lapply(positions,1, sum)
apply(positions,1, sum)
apply(positions,2, mean)
apply(positions,2, mean)
positions <- na.omit(positions)
apply(positions,2, mean)
adm <- apply(positions,2, mean)
ifelse(adm < 0.5, 0, 1)
